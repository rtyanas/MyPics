package com.yanas.mobileapp.mypic.datastore;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import com.yanas.mobileapp.mypic.MessageData;
import com.yanas.mobileapp.mypic.GlobalSettings;
import com.yanas.mobileapp.mypic.MessageData;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

public class MessageListDbData {
	
	Context context;

	  // Database fields
	  private SQLiteDatabase database;
	  private MessageListDbHelper dbHelper;
	  private String[] allColumns = {
			  MessageListDbHelper.COLUMN_ID,
			  MessageListDbHelper.COLUMN_MESSAGE,
			  MessageListDbHelper.COLUMN_MFONT,
			  MessageListDbHelper.COLUMN_MBOLD,
			  MessageListDbHelper.COLUMN_MITALIC,
			  MessageListDbHelper.COLUMN_MSIZE,
			  MessageListDbHelper.COLUMN_PIC 
	  };

	  public MessageListDbData(Context context_in) {
		  context = context_in;
	    dbHelper = new MessageListDbHelper(context);
	  }

	  public void open() throws SQLException {
	    database = dbHelper.getWritableDatabase();
	    Log.d("BuildingDbData", "database: open? "+ database.isOpen() + database.toString());
	  }

	  public void close() {
	    dbHelper.close();
	  }

	  public MessageData createMessage(MessageData messageD) {
	    ContentValues values = new ContentValues();

	    values.put(MessageListDbHelper.COLUMN_MESSAGE, messageD.getMessage());
	    values.put(MessageListDbHelper.COLUMN_MFONT, messageD.getmFont());
	    values.put(MessageListDbHelper.COLUMN_MBOLD, messageD.getmBold());
	    values.put(MessageListDbHelper.COLUMN_MITALIC, messageD.getmItalic());
	    values.put(MessageListDbHelper.COLUMN_MSIZE, messageD.getmSize());
	    values.put(MessageListDbHelper.COLUMN_PIC, messageD.getPic());
	    long insertId = database.insert(MessageListDbHelper.TABLE, null,
	        values);
//	    if(insertId != -1) {
//		    Cursor cursor = database.query(MessageListDbHelper.TABLE,
//		        allColumns, MessageListDbHelper.COLUMN_ID + " = " + insertId, null,
//		        null, null, null);
//		    cursor.moveToFirst();
//		    newBuilding = cursorToBuilding(cursor);
//		    cursor.close();
//	    }
	    return messageD;
	  }

	  public void deleteStation(MessageData messageD_in) {
	    long id = messageD_in.getId();
	    
	    if(GlobalSettings.dataStore) Log.i("MessageListDbData", "delete Station with id: " + id);
	    
	    database.delete(MessageListDbHelper.TABLE, MessageListDbHelper.COLUMN_ID
	        + " = " + id, null);
	  }
	  
	  public int initDB(Vector<MessageData> messages) {
			int numStationsRet=0;
//			Cursor cursor = database.rawQuery("", null);
			long numRows = DatabaseUtils.longForQuery(
					database, "SELECT COUNT(*) FROM "+ MessageListDbHelper.TABLE, null);
			if(numRows <= 0) {
				for(MessageData mess : messages) {
					this.createMessage(mess);
					numStationsRet++;
				}
			}
			else {
				Log.d("MessageListDbData", 
						"records not added to database, existing records: "+ numRows);
			}
			
			return numStationsRet;
	  }
		



	  public List<MessageData> getAllCityZipData() {
	    List<MessageData> comments = new ArrayList<MessageData>();

	    Cursor cursor = database.query(MessageListDbHelper.TABLE,
	        allColumns, null, null, null, null, null);

	    cursor.moveToFirst();
	    while (!cursor.isAfterLast()) {
	    	MessageData comment = cursorToMessage(cursor);
	      comments.add(comment);
	      cursor.moveToNext();
	    }
	    // make sure to close the cursor
	    cursor.close();
	    return comments;
	  }

	  public MessageData getMessage(long id_in) {
		    MessageData mess = new MessageData();

		    Cursor cursor = database.query(MessageListDbHelper.TABLE,
		        allColumns, null, null, null, null, null);

		    cursor.moveToFirst();
		    while (!cursor.isAfterLast()) {
		    	mess = cursorToMessage(cursor);
		    	if(mess.getId() == id_in)
		    		break;
		    	cursor.moveToNext();
		    }
		    // make sure to close the cursor
		    cursor.close();
		    return building;
		  }

	  private MessageData cursorToMessage(Cursor cursor) {
		String city, st, zip;  
		MessageData station = new MessageData(Long.parseLong(cursor.getString(0)),
				 cursor.getString(1), cursor.getString(2), cursor.getString(3),
				 cursor.getString(4), cursor.getString(5), cursor.getString(6)				 
				);
		
		return station;
	  }

	public SQLiteDatabase getDatabase() {
		return database;
	}


	  
}
